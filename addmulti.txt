#include <stdio.h>
#include <stdlib.h>

struct term {
    int coeff;
    int expo;
};

struct poly {
    int n;
    struct term *t;
};

void create(struct poly *);
void display(struct poly);
struct poly *addPoly(struct poly *, struct poly *);
int max(struct poly);
struct poly *mulPoly(struct poly *, struct poly *);

int main() {
    struct poly p1, p2, *addp, *multp;
    create(&p1);
    create(&p2);

    display(p1);
    printf("\n%d is max\n", max(p1));
    display(p2);
    printf("\n%d is max\n", max(p2));

    addp = addPoly(&p1, &p2);
    printf("\nResult of Addition:\n");
    display(*addp);

    multp = mulPoly(&p1, &p2);
    printf("\nResult of Multiplication:\n");
    display(*multp);

    // Free allocated memory
    free(p1.t);
    free(p2.t);
    free(addp->t);
    free(addp);
    free(multp->t);
    free(multp);

    return 0;
}

void create(struct poly *temp) {
    int i;
    printf("Enter the number of terms (non-zero): ");
    scanf("%d", &temp->n);

    temp->t = (struct term *)malloc(temp->n * sizeof(struct term));

    for (i = 0; i < temp->n; i++) {
        printf("\nEnter term %d:\n", i);
        printf("Enter coefficient: ");
        scanf("%d", &temp->t[i].coeff);
        printf("Enter exponent: ");
        scanf("%d", &temp->t[i].expo);
    }
    printf("\n");
}

void display(struct poly temp) {
    int i;
    printf("Given Polynomial is: ");

    // Sort terms in descending order of exponents
    for (i = 0; i < temp.n - 1; i++) {
        int j;
        for (j = i + 1; j < temp.n; j++) {
            if (temp.t[i].expo < temp.t[j].expo) {
                // Swap terms
                struct term tempTerm = temp.t[i];
                temp.t[i] = temp.t[j];
                temp.t[j] = tempTerm;
            }
        }
    }

    int printedTerm = 0;  // Flag to check if a term has been printed

    for (i = 0; i < temp.n; i++) {
        if (temp.t[i].coeff != 0) {
            if (printedTerm) {
                printf(" + ");
            }

            if (temp.t[i].expo != 0 && temp.t[i].expo != 1)
                printf("%dx^%d", temp.t[i].coeff, temp.t[i].expo);
            else if (temp.t[i].expo == 1)
                printf("%dx", temp.t[i].coeff);
            else
                printf("%d", temp.t[i].coeff);

            printedTerm = 1;  // Set the flag to indicate a term has been printed
        }
    }

    printf("\n");
}

int max(struct poly temp) {
    int i, n = temp.t[0].expo;
    for (i = 1; i < temp.n; i++) {
        if (n < temp.t[i].expo)
            n = temp.t[i].expo;
    }
    return n;
}

struct poly *addPoly(struct poly *p1, struct poly *p2) {
    int i = 0, j = 0, k = 0;
    struct poly *p3 = (struct poly *)malloc(sizeof(struct poly));
    p3->n = p1->n + p2->n;
    p3->t = (struct term *)malloc(p3->n * sizeof(struct term));

    while (i < p1->n && j < p2->n) {
        if (p1->t[i].expo > p2->t[j].expo) {
            p3->t[k] = p1->t[i];
            i++;
        } else if (p2->t[j].expo > p1->t[i].expo) {
            p3->t[k] = p2->t[j];
            j++;
        } else {
            p3->t[k].expo = p1->t[i].expo;
            p3->t[k].coeff = p1->t[i].coeff + p2->t[j].coeff;
            i++;
            j++;
        }
        k++;
    }

    while (i < p1->n) {
        p3->t[k] = p1->t[i];
        i++;
        k++;
    }

    while (j < p2->n) {
        p3->t[k] = p2->t[j];
        j++;
        k++;
    }

    return p3;
}

struct poly *mulPoly(struct poly *p1, struct poly *p2) {
    int i, j, k;
    struct poly *p3 = (struct poly *)malloc(sizeof(struct poly));
    p3->n = p1->n * p2->n;
    p3->t = (struct term *)malloc(p3->n * sizeof(struct term));

    for (i = 0; i < p3->n; i++) {
        p3->t[i].coeff = 0;
        p3->t[i].expo = 0;
    }

    for (i = 0; i < p1->n; i++) {
        for (j = 0; j < p2->n; j++) {
            k = p1->t[i].expo + p2->t[j].expo;
            p3->t[k].coeff += p1->t[i].coeff * p2->t[j].coeff;
            p3->t[k].expo = k;
        }
    }

    return p3;
}

